<?php

namespace app\models;

use Yii;
use yii\data\Pagination;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "article".
 *
 * @property int $id
 * @property string $title
 * @property string $description
 * @property string $content
 * @property string $date
 * @property string $image
 * @property int $viewed
 * @property int $user_id
 * @property int $status
 * @property int $category_id
 *
 * @property ArticleTag[] $articleTags
 * @property Comment[] $comments
 */
class Article extends \yii\db\ActiveRecord
{
    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'article';
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['title'],'required'],//обязательное поле для заполнения
            [['title','description','content'], 'string'],//текстовые поля
            [['date'],'date','format'=>'php:Y-m-d'],//формат даты
            [['date'],'default','value'=>date('Y-m-d')],//по умолчанию ставится текущая дата
            [['title'],'string','max'=>255]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'title' => 'Title',
            'description' => 'Description',
            'content' => 'Content',
            'date' => 'Date',
            'image' => 'Image',
            'viewed' => 'Viewed',
            'user_id' => 'User ID',
            'status' => 'Status',
            'category_id' => 'Category ID',
        ];
    }
    //сохраняем модель
    public function saveArticle()
    {
        $this->user_id = Yii::$app->user->id;//записываем id пользователя до сохранения самой статьи
        return $this->save(false);//а сам метод save задействует и валидацию
    }
    // метод сохранения названия картинки в базе
    public function saveImage($filename)
    {
        $this->image = $filename;// указываем свойству image значение, которое мы передали
        return $this->save(false);//делаем запрос в базу на сохранение и false - отключаем валидацию по умолчанию
    }
    //метод вывода картинки в листинге
    public function getImage()
    {
        if ($this->image){//если картинка есть,
            return '/uploads/' . $this->image;//то возвращаем её путь,
        }
        return '/no-image.png';//а если нет, то выведем готовую картинку, чтоб место пустым не было
    }
    //метод удаления картинки
    public function deleteImage()
    {
        $imageUploadModel = new ImageUpload();
        $imageUploadModel->deleteCurrentImage($this->image);//передаём название картинки, которую хотим удалить
    }
    //автоматически запускается перед тем, как статья удалится
    public function beforeDelete()
    {
        $this->deleteImage();//вызываем метод удаления файла
        return parent::beforeDelete(); // TODO: Change the autogenerated stub
    }
    public function getCategory()
    {
        return $this->hasOne(Category::className(), ['id' => 'category_id']);//Category - указываем, с какой моделью идёт связь; ['id' => 'category_id'] - на основе каких полей в базе идёт связывание, 'id' - поле в таблице категории, 'category_id' - поле в таблице статьи; $this->hasOne - статья имеет одну категорию
    }
    //метод сохранения категории
    public function saveCategory($category_id)//принимает id категории
    {
        $category = Category::findOne($category_id);//вытащим из базы нашу категорию
        if($category != null)//связываем только в том случае, если категория не нул
        {
            $this->link('category', $category);//в метод link передаём название связи('category') и модель, с которой хотим связаться($category)
            return true;// после связи возвращаем true
        }
    }
    public function getTags()
    {
        return $this->hasMany(Tag::className(), ['id' => 'tag_id'])//Tag::className() - указываем, с какой моделью будет связь
            ->viaTable('article_tag', ['article_id' => 'id']);
    }
    //метод получения выбранных тегов
    public function getSelectedTags()
    {
        $selectedIds = $this->getTags()->select('id')->asArray()->all();//вытащить все теги, связанные с этой статьёй и из них выбрать только их id в виде массива
        return ArrayHelper::getColumn($selectedIds, 'id');//преобразует массив, чтоб значения были в одном массиве
    }
    //метод сохранения тегов
    public function saveTags($tags)//принимаем массив
    {
        if (is_array($tags))
        {
            $this->clearCurrentTags();//указание, чтобы все текущие связи удалились перед записью новых
            foreach($tags as $tag_id)
            {
                $tag = Tag::findOne($tag_id);
                $this->link('tags', $tag);
            }
        }
    }
    //метод удаления всех текущих связей
    public function clearCurrentTags()
    {
        ArticleTag::deleteAll(['article_id'=>$this->id]);
    }
    public function getDate()
    {
        return Yii::$app->formatter->asDate($this->date);
    }
    public static function getAll($pageSize = 5)
    {
        $query = Article::find();//запрос в базу
        $count = $query->count();//берём общее количество статей, но пока ещё не вытаскиваем из базы
        $pagination = new Pagination(['totalCount' => $count, 'pageSize'=>$pageSize]);//затем это к-ство передаём в класс пагинации. В итоге мы получаем обьект пагинации с общим количеством статей; 'pageSize'=> - лимит к-ства записей на 1 стр
        // limit the query using the pagination and retrieve the articles
        $articles = $query//лимитируем наш запрос, используя пагинацию и выводим все статьи
            ->offset($pagination->offset)//смещение, к-ство записей, которые можно сместить назад, чтобы выбрать следующие несколько
            ->limit($pagination->limit)//выбрать определённое к-ство записей из базы
            ->all();

        $data['articles'] = $articles;
        $data['pagination'] = $pagination;

        return $data;
    }
    public static function getPopular()
    {
        return Article::find()->orderBy('viewed desc')->limit(3)->all();//вытащить 3 статьи и сортировать их по полю viewed
    }
    public static function getRecent()
    {
        return Article::find()->orderBy('date asc')->limit(4)->all();//вытащить 4 статьи и сортировать их по дате
    }
    //метод связи с моделью комментариев
    public function getComments()
    {
        return $this->hasMany(Comment::className(), ['article_id'=>'id']);//сначала идёт название модели, потом 2 айдишника, которые связываются; 'article_id' - id в модели комментов, а второй в модели статьи
    }
    public function getArticleComments()
    {
        return $this->getComments()->where(['status'=>1])->all();//выводить только те комменты, у которых статус 1
    }
//когда человек заходит на страницу отдельного поста, мы берём из базы текущее число и увеличиваем на 1
    public function viewedCounter()
    {
        $this->viewed += 1;
        return $this->save(false);
    }


    public function getAuthor()
    {
        return $this->hasOne(User::className(), ['id'=>'user_id']);//так как статья имеет только 1 автора, то связь будет hasOne, и выведем имя автора на наших страницах
    }
}
